# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graf.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets



#from BIBLIOTECAS.Basicas.matplolib.graf.MplCanvas import MplCanvas

from PyQt5.QtWidgets import QSizePolicy
from matplotlib.backends.backend_qt5agg import  FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import  Figure
import matplotlib.pyplot as plt

class Ui_Graf(QtWidgets.QDialog):
    def setupUi(self, data,tipo):
        self.left = 10
        self.top = 10
        self.title = "ejemplo grafico en qt"

        self.setObjectName("Dialog")
        self.resize(521, 422)
        self.pushButton = QtWidgets.QPushButton(self)
        self.pushButton.setGeometry(QtCore.QRect(210, 390, 99, 27))
        self.pushButton.setObjectName("pushButton")

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        self.generagraf(data,tipo)
        self.acciones()

    def generagraf(self,data,tipo):
        m = PlotCanvas(self, width=5 , height = 4)
        m.plot(data,tipo)
        m.move(0,0)


    def acciones(self):
        #self.pushButton.clicked.connect(self.aceptar)
        self.pushButton.clicked.connect(self.aceptar)

    def aceptar(self):
        return self.done(1)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton.setText(_translate("Dialog", "ok"))


class PlotCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=4, dpi=100):

        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        FigureCanvas.__init__(self, fig)
        self.setParent(parent)
        FigureCanvas.setSizePolicy(self, QSizePolicy.Expanding, QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

    def plot(self, data, tipo):

        if tipo == "sencillo":
            self.__basico(data)
        elif tipo == "doble":
            self.__doble(data)

        self.draw()

    def __basico(self,data):
        ax = self.figure.add_subplot(111)
        ax.plot(data[0], data[1], 'r-')
        ax.set_title('mat plot ejemplo')

    def __doble(self,data):
        ax = self.figure.add_subplot(111)
        ax.plot(data[0], 'b')
        # Dibujamos una línea recta azul
        #
        # ax.xlabel('Valores de x')
        # # Ponemos etiqueta al eje x
        #
        # ax.ylabel('Línea azul')
        # # Ponemos etiqueta al eje y

        ax.twinx()
        # Creamos un segundo eje y

        ax.plot(data[1], 'g')
        # Dibuja una exponencial de 0 a 5 con la y representada
        # en el segundo eje y
        #
        # ax.ylabel('Línea verde')
        # Ponemos etiqueta al segundo eje y

        ax.xlim(-10, 110)
        # Limitamos los valores del eje x para que vayan desde -10 a 110

#
# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     Dialog = QtWidgets.QDialog()
#     ui = Ui_Dialog()
#     ui.setupUi(Dialog)
#     Dialog.show()
#     sys.exit(app.exec_())
